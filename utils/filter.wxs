var DateFr = {

  getDate: function(time, splitStr) {

    if (!time) return '';

    var date = getDate(time);
    var M = date.getMonth() + 1;
    var y = date.getFullYear();
    var d = date.getDate();

    if (M < 10) M = "0" + M;
    if (d < 10) d = "0" + d;

    if (splitStr)
      return y + splitStr + M + splitStr + d;
    else
      return {
        y: y,
        M: M,
        d: d
      };
  },
  getDistance: function(distance) {
    var num = distance / 1000;
    return num ? num.toFixed(1) : '';
  },
  getSupportedLanguage: function(language) {
    return language.reduce(function(pre, curr) {
      return pre + '/' + curr;
    })
  },
  formatTime: function(timestamp) {
    var date = getDate(timestamp);
    var year = date.getFullYear();
    var month = date.getMonth() + 1
    var day = date.getDate()
    var hour = date.getHours()
    var minute = date.getMinutes()
    var second = date.getSeconds()

    return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute, second].map(formatNumber).join(':')
  },
  secondToDate: function(result) {
    var m = Math.floor((result / 60 % 60)) < 10 ? '0' + Math.floor((result / 60 % 60)) : Math.floor((result / 60 % 60));
    var s = Math.floor((result % 60)) < 10 ? '0' + Math.floor((result % 60)) : Math.floor((result % 60));
    return m + ":" + s;
  },
  getSureDateText: function(type) {
    if (type === 1) {
      return '立刻确认'
    } else if (type === 2) {
      return '工作日3小时内确认'
    } else if (type === 3) {
      return '工作日1天内确认'
    } else if (type === 4) {
      return '工作日3天内确认'
    }
  },
  getOrderPrice: function(price, coupon) {
    if (price < 100) {
      return price;
    }
    if (coupon.type === 0) {
      return price - (price * (coupon.discount / 100));
    } else if (coupon.type === 1) {
      return price - coupon.reducePrice
    } else if (coupon.type === 2) {
      return price - coupon.reducePrice >= 0 ? price - coupon.reducePrice : 0
    } else {
      return price
    }
  },
  getDiscountPrice: function(price, coupon) {
    if (price < 100) {
      return 0;
    }
    if (coupon.type === 0) {
      return price * (coupon.discount / 100)
    } else if (coupon.type === 1 || coupon.type === 2) {
      return coupon.reducePrice
    }
  },
  getChineseDate: function(str) {
    str = '' + str;
    var year = str.substring(0, 4) + '年';
    var month = str.substring(4, 6) + '月';
    var day = str.substring(6, 8) + '日';
    return year + month + day;
  },
  getOrderDate: function(time) {
    if (!time) return '';

    var date = getDate(time);
    var M = date.getMonth() + 1;
    var y = date.getFullYear();
    var d = date.getDate();

    if (M < 10) M = "0" + M;
    if (d < 10) d = "0" + d;

    return y + '年' + M + '月' + d + '日';
  },
  getOrderStatus: function (status, preOrder) {
    var str = '';
    switch (status) {
      case -1:
        str = '待付款';
        break;
      case 0:
        str = '已取消';
        break;
      case 1:
        str = '待确认';
        break;
      case 2:
        str = '待发货';
        break;
      case 3:
        str = preOrder ? '待就餐' : '待使用';
        break;
      case 4:
        str = '待点评';
        break;
      case 5:
        str = '已完成';
        break;
      case 6:
        str = '退款中';
        break;
      case 7:
        str = '已退款';
        break;
      case 8:
        str = '退款驳回';
        break;
      case 10:
        str = '确认驳回';
        break;
      case 11:
        str = '使用中';
        break;
      case 99:
        str = '超时无效';
        break;
    };
    return str;
  },
  getOrderStatusSubText: function(status) {
    var str = '';
    switch (status) {
      case -1:
        str = '去付款';
        break;
      case 0:
        str = '再次购买';
        break;
      case 1:
        str = '等待确认中...';
        break;
      case 2:
        str = '再次购买';
        break;
      case 3:
        str = '再次购买';
        break;
      case 4:
        str = '再次购买';
        break;
      case 5:
        str = '再次购买';
        break;
      case 6:
        str = '退款确认中...';
        break;
      case 7:
        str = '退款成功';
        break;
      case 8:
        str = '退款驳回';
        break;
      case 10:
        str = '确认驳回';
        break;
      case 11:
        str = '使用中';
        break;
      case 99:
        str = '超时无效';
        break;
    };
    return str;
  },
  getExtFieldText: function(str) {
    var obj = JSON.parse(str);
    var result = ''
    if (obj['babyChairCount']) {
      result += '安全座椅:' + obj['babyChairCount']
    }
    return result;
  },
  getPayTypeText: function(type) {
    var str = '';
    if (type === 1) str = '支付宝';
    if (type === 2) str = '微信';
    if (type === 3) str = 'apple';
    return str;
  },
  getLinePendingDateText: function (lineAt) {
    var diff = (getDate().getTime() - lineAt) / 1000;
    var d = Math.floor((diff / (3600 * 24)));
    var h = Math.floor((diff % (3600 * 24) / 3600));
    var m = Math.floor((diff % 3600 / 60));
    var s = Math.floor((diff % 60)) < 10 ? '0' + Math.floor((diff % 60)) : Math.floor((diff % 60));
    return d > 0 ? d + '天' + h + '时' + m + '分' : h + '时' + m + '分钟';
  },
  getLineStatusText: function (status) {
    var str = '';
    if (status === 1 || status === 0) str = '排队中';
    if (status === 2) str = '已就餐';
    if (status === 3) str = '已过号';
    if (status === 3) str = '商户下线';
    return str;
  },
  getFoodOrderTotal: function (dots) {
    var total = dots.map(function (item) {
      return item.foodOrderBatchDetail.foodNumber;
    }).reduce(function (pre, next) {
      return pre + next;
    });
    return total;
  },
  getNowFoodOrderNum: function (dots, food) {
    if (dots.length) {
      var val = 0;
      dots.forEach(function (item) {
        if (item.foodOrderBatchDetail.foodId === food.food.id) {
          val = item.foodOrderBatchDetail.foodNumber;
        }
      });
      return val;
    } else {
      return 0;
    }
  },
  getFoodOrderBatchTotalPrice: function (dots) {
    var price = dots.reduce(function (pre, next) {
      return pre + (next.foodOrderBatchDetail.foodPrice * next.foodOrderBatchDetail.foodNumber)
    }, 0);
    return price / 100;
  }
}

function formatNumber(n) {
  n = n.toString()
  return n[1] ? n : '0' + n
}

module.exports = {
  getDate: DateFr.getDate,
  getDistance: DateFr.getDistance,
  getSupportedLanguage: DateFr.getSupportedLanguage,
  formatTime: DateFr.formatTime,
  getSureDateText: DateFr.getSureDateText,
  getOrderPrice: DateFr.getOrderPrice,
  getDiscountPrice: DateFr.getDiscountPrice,
  getChineseDate: DateFr.getChineseDate,
  getOrderStatus: DateFr.getOrderStatus,
  getOrderStatusSubText: DateFr.getOrderStatusSubText,
  getOrderDate: DateFr.getOrderDate,
  getExtFieldText: DateFr.getExtFieldText,
  getPayTypeText: DateFr.getPayTypeText,
  secondToDate: DateFr.secondToDate,
  getLinePendingDateText: DateFr.getLinePendingDateText, 
  getLineStatusText: DateFr.getLineStatusText,
  getFoodOrderTotal: DateFr.getFoodOrderTotal,
  getNowFoodOrderNum: DateFr.getNowFoodOrderNum,
  getFoodOrderBatchTotalPrice: DateFr.getFoodOrderBatchTotalPrice
}